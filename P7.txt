#include<stdio.h>
#include<ctype.h>
#include<stdlib.h>
#include<string.h>

int precedence(char opr)
{
    switch(opr){
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return -1;
    }
}
char* converttopostfix(char *exp)
{
    int size=strlen(exp), top=-1, index=0;
    char* str=(char*)malloc(size+1);
    char stack[size];
    for(int i=0; i<size; i++)
    {
        char ch=exp[i];
        if(isalnum(ch)){
            str[index++]=ch;
        }
        else if(ch=='+' ||ch=='-' ||ch=='*' ||ch=='/' ||ch=='^' ){
            if(top==-1)
                stack[++top]=ch;
            else{
                while(top!=-1 && precedence(ch)<=precedence(stack[top])){
                    str[index++]=stack[top--];
                }
                stack[++top]=ch;
            }
        }
        else if(ch=='('){
            stack[++top]=ch;
        }
        else if(ch==')'){
            while(stack[top]!='('){
                str[index++]=stack[top--];
            }
            top--;
        }

    }
    while(top!=-1){
        str[index++]=stack[top--];
    }
    str[index]='\0';
    return str;
}
char* converttoprefix(char *exp)
{
    int size=strlen(exp), top=-1, index=0;
    char* str=(char*)malloc(size+1);
    char stack[size];
    for(int i=size-1; i<=0; i--)
    {
        char ch=exp[i];
        if(isalnum(ch)){
            str[index++]=ch;
        }
        else if(ch=='+' ||ch=='-' ||ch=='*' ||ch=='/' ||ch=='^' ){
            if(top==-1)
                stack[++top]=ch;
            else{
                while(top!=-1 && precedence(ch)<=precedence(stack[top])){
                    str[index++]=stack[top--];
                }
                stack[++top]=ch;
            }
        }
        else if(ch==')'){
            stack[++top]=ch;
        }
        else if(ch=='('){
            while(stack[top]!=')'){
                str[index++]=stack[top--];
            }
            top--;
        }

    }
    while(top!=-1){
        str[index++]=stack[top--];
    }
    str[index]='\0';
    strrev(str); // or use ur own logic for online, use in lab file
    return str; 
}
int main(){
    char exp1[100];
    printf("Enter Infix Expression: ");
    gets(exp1);
    printf("Postfix Form of Infix Expression %s is %s\n", exp1, converttopostfix(exp1));
    printf("Prefix Form of Infix Expression %s is %s\n", exp1, converttoprefix(exp1));
    return 0;
}

